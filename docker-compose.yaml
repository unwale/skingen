services:

  task-service:
    build:
      context: .
      dockerfile: ./services/task-service/Dockerfile
    ports:
      - "${TASK_SERVICE_PORT}:${TASK_SERVICE_PORT}"
    environment:
      - PORT=${TASK_SERVICE_PORT}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${TASK_SERVICE_POSTGRES_USER}
      - POSTGRES_PASSWORD=${TASK_SERVICE_POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@queue:${RABBITMQ_PORT}
      - GENERATE_IMAGE_QUEUE=${GENERATE_IMAGE_QUEUE}
      - TASK_RESULT_QUEUE=${TASK_RESULT_QUEUE}
    depends_on:
      migrator:
        condition: service_completed_successfully
      queue:
        condition: service_healthy
    networks:
      - skingen-network
  gateway:
    build:
      context: .
      dockerfile: ./services/gateway/Dockerfile
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    environment:
      - PORT=${GATEWAY_PORT}
      - TASK_SERVICE_URL=task-service:${TASK_SERVICE_PORT}
    networks:
      - skingen-network
    depends_on:
      - task-service
  migrator:
    image: migrate/migrate:latest
    command: [ "-path", "/migrations", "-database", "postgres://${ROOT_POSTGRES_USER}:${ROOT_POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable", "up" ]
    volumes:
      - ./database-setup/migrations:/migrations
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - skingen-network
  postgres:
    image: postgres:16-alpine
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${ROOT_POSTGRES_USER}
      - POSTGRES_PASSWORD=${ROOT_POSTGRES_PASSWORD}
      - TASK_SERVICE_POSTGRES_USER=${TASK_SERVICE_POSTGRES_USER}
      - TASK_SERVICE_POSTGRES_PASSWORD=${TASK_SERVICE_POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database-setup/init-task-service.sh:/docker-entrypoint-initdb.d/01-init-roles-and-schemas.sh
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${ROOT_POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - skingen-network

  queue:
    image: rabbitmq:3-management
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - skingen-network

networks:
  skingen-network:
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:
